------------------------------------------0408--------------------------------------------

CREATE TABLE CUSTOMER(
	CUST_CD VARCHAR(10) NOT NULL,
	CUST_NM VARCHAR(20) NOT NULL,
	CUST_AGE INT DEFAULT 0,
	CUST_LVL VARCHAR(10),
	CUST_JOB VARCHAR(20),
	CUST_POINT INT DEFAULT 0,
	PRIMARY KEY (CUST_CD),
	CHECK (CUST_AGE <= 60)
);


CREATE TABLE PRODUCTS(
	PROD_CD VARCHAR(10) NOT NULL,
	PROD_NM VARCHAR(20) NOT NULL,
	PROD_QY INT DEFAULT 0,
	PROD_PRI DECIMAL(18,4) DEFAULT 0,
	PROD_VEND VARCHAR(20),
	PRIMARY KEY (PROD_CD)
);

CREATE TABLE ORDERS(
	ORD_CD VARCHAR(10) NOT NULL,
	CUST_CD VARCHAR(10),
	PROD_CD VARCHAR(10) DEFAULT 0,
	ORDER_QTY INT, 
	ORDER_ADD VARCHAR(20),
	ORDER_REGDT DATETIME DEFAULT GETDATE(),
	PRIMARY KEY (ORD_CD),
	FOREIGN KEY (CUST_CD) REFERENCES CUSTOMER(CUST_CD),
	FOREIGN KEY (PROD_CD) REFERENCES PRODUCTS(PROD_CD)
);


SELECT * FROM CUSTOMER;
SELECT * FROM PRODUCTS;
SELECT* FROM ORDERS;


ALTER TABLE CUSTOMER ADD CUST_DAY DATE;
ALTER TABLE CUSTOMER DROP COLUMN CUST_DAY;

ALTER TABLE ORDERS ADD CONSTRAINT CHK_QTY CHECK(ORDER_QTY <= PRODUCTS.PROD_QY);
-- Q. CHECK 제약조건 설정시 다른 테이블의 값과 비교할 수 있없? WHY?
-- A. 위의 명령문은 실행 X. ALTER 에서 테이블을 JOIN 해서 제약조건 만들 수 있지만 그렇게 잘 하지않음.
-- Q. PRODUCTS(PROD_QY) 와 PRODUCTS.PROD_QY 의 차이?


ALTER TABLE PRODUCTS ADD CONSTRAINT QY_LIMIT CHECK(PROD_QY >= 0 AND PROD_QY <= 10000);


CREATE TABLE VENDERS(
	VEND_CD VARCHAR(10) NOT NULL,
	VEND_NM VARCHAR(20),
	VEND_PRD VARCHAR(10),
	VEND_PHONE VARCHAR(20),
	PRIMARY KEY (VEND_CD),
	FOREIGN KEY (VEND_PRD) REFERENCES PRODUCTS(PROD_CD)
);
SELECT *FROM VENDERS;
DROP TABLE VENDERS;


INSERT INTO CUSTOMER(CUST_CD, CUST_NM, CUST_AGE, CUST_LVL, CUST_JOB, CUST_POINT)
VALUES('GG', 'GRACE', 25, 'VIP', 'DOCTOR', 5000);
INSERT INTO CUSTOMER(CUST_CD, CUST_NM, CUST_AGE, CUST_LVL, CUST_JOB, CUST_POINT)
VALUES('AYLE', 'ALEX', 20, 'GOLD', 'TEACHER', 3000);
INSERT INTO CUSTOMER(CUST_CD, CUST_NM, CUST_AGE, CUST_LVL, CUST_JOB, CUST_POINT)
VALUES('K27', 'KALLY', 27, 'SILVER', 'ENGINEER', 2500);
INSERT INTO CUSTOMER(CUST_CD, CUST_NM, CUST_AGE, CUST_LVL, CUST_JOB)
VALUES('WATERMELON', 'LUKE', 30, 'BRONZE', 'SINGER');
INSERT INTO CUSTOMER(CUST_CD, CUST_NM, CUST_AGE, CUST_LVL, CUST_JOB, CUST_POINT)
VALUES('HIDORA', 'DORA', 23, 'VIP', 'NURSE', 5000);
INSERT INTO CUSTOMER(CUST_CD, CUST_NM, CUST_AGE, CUST_LVL, CUST_JOB, CUST_POINT)
VALUES('APPLE', '정소화', 20, 'GOLD', 'STUDENT', 1000);
INSERT INTO CUSTOMER(CUST_CD, CUST_NM, CUST_AGE, CUST_LVL, CUST_JOB, CUST_POINT)
VALUES('BANANA', '김선우', 25, 'VIP', 'NURSE', 2500);
INSERT INTO CUSTOMER(CUST_CD, CUST_NM, CUST_AGE, CUST_LVL, CUST_JOB, CUST_POINT)
VALUES('CARROT', '고명석', 28, 'GOLD', 'TEACHER', 4500);
INSERT INTO CUSTOMER(CUST_CD, CUST_NM, CUST_LVL, CUST_JOB)
VALUES('ORANGE', '김용욱', 'SILVER', 'STUDENT');
INSERT INTO CUSTOMER(CUST_CD, CUST_NM, CUST_AGE, CUST_LVL, CUST_JOB, CUST_POINT)
VALUES('MELON', '성원용', 35, 'GOLD', 'OFFICER', 5000);


INSERT INTO PRODUCTS(PROD_CD, PROD_NM, PROD_QY, PROD_PRI, PROD_VEND)
VALUES('P01', 'DUMPLING', 5000, 4500, '대한식품');
INSERT INTO PRODUCTS(PROD_CD, PROD_NM, PROD_QY, PROD_PRI, PROD_VEND)
VALUES('P02', 'SPICY NOODLE', 2500, 5500, '민국푸드');
INSERT INTO PRODUCTS(PROD_CD, PROD_NM, PROD_QY, PROD_PRI, PROD_VEND)
VALUES('P03', 'RICE PIE', 3600, 2600, '한빛제과');
INSERT INTO PRODUCTS(PROD_CD, PROD_NM, PROD_QY, PROD_PRI, PROD_VEND)
VALUES('P04', 'CHOCOLATE', 1250, 2500, '한빛제과');
INSERT INTO PRODUCTS(PROD_CD, PROD_NM, PROD_QY, PROD_PRI, PROD_VEND)
VALUES('P05', 'RAMEN', 2200, 1200, '대한식품');
INSERT INTO PRODUCTS(PROD_CD, PROD_NM, PROD_QY, PROD_PRI, PROD_VEND)
VALUES('P06', 'UDONG', 1000, 1550, '민국푸드');
INSERT INTO PRODUCTS(PROD_CD, PROD_NM, PROD_QY, PROD_PRI, PROD_VEND)
VALUES('P07', 'BISCUIT', 1650, 1500, '한빛제과');


INSERT INTO ORDERS(ORD_CD, CUST_CD, PROD_CD, ORDER_QTY, ORDER_ADD)
VALUES('O01', 'APPLE', 'P03', 10, '서울시 마포구');
INSERT INTO ORDERS(ORD_CD, CUST_CD, PROD_CD, ORDER_QTY, ORDER_ADD)
VALUES('O02', 'MELON', 'P01', 5, '충청북도 보은군');
INSERT INTO ORDERS(ORD_CD, CUST_CD, PROD_CD, ORDER_QTY, ORDER_ADD)
VALUES('O03', 'BANANA', 'P06', 45, '인천시 계양구');
INSERT INTO ORDERS(ORD_CD, CUST_CD, PROD_CD, ORDER_QTY, ORDER_ADD)
VALUES('O04', 'CARROT', 'P02', 8, '경기도 부천시');
INSERT INTO ORDERS(ORD_CD, CUST_CD, PROD_CD, ORDER_QTY, ORDER_ADD)
VALUES('O05', 'BANANA', 'P06', 36, '부산시 금정구');
INSERT INTO ORDERS(ORD_CD, CUST_CD, PROD_CD, ORDER_QTY, ORDER_ADD)
VALUES('O06', 'HIDORA', 'P01', 19, '경기도 용인시');
INSERT INTO ORDERS(ORD_CD, CUST_CD, PROD_CD, ORDER_QTY, ORDER_ADD)
VALUES('O07', 'AYLE', 'P03', 22, '서울시 영등포구');
INSERT INTO ORDERS(ORD_CD, CUST_CD, PROD_CD, ORDER_QTY, ORDER_ADD)
VALUES('O08', 'K27', 'P02', 50, '강원도 춘천시');
INSERT INTO ORDERS(ORD_CD, CUST_CD, PROD_CD, ORDER_QTY, ORDER_ADD)
VALUES('O09', 'BANANA', 'P04', 15, '전라남도 목포시');
INSERT INTO ORDERS(ORD_CD, CUST_CD, PROD_CD, ORDER_QTY, ORDER_ADD)
VALUES('O10', 'HIDORA', 'P03', 20, '경기도 안양시');


SELECT CUST_CD, CUST_NM, CUST_LVL FROM CUSTOMER;

SELECT PROD_VEND FROM PRODUCTS;

SELECT ALL PROD_VEND FROM PRODUCTS;
SELECT ALL CUST_CD FROM ORDERS;

--중복값은 제외된 속성
SELECT DISTINCT PROD_VEND FROM PRODUCTS;
SELECT DISTINCT CUST_CD FROM ORDERS;

SELECT PROD_NM, PROD_PRI AS PRICE FROM PRODUCTS;

SELECT * FROM PRODUCTS WHERE PROD_VEND = '한빛제과';

SELECT PROD_CD, ORDER_QTY, ORDER_REGDT FROM ORDERS WHERE CUST_CD = 'BANANA' AND ORDER_QTY <=15;
SELECT PROD_CD, ORDER_QTY, ORDER_REGDT FROM ORDERS WHERE CUST_CD = 'BANANA' OR ORDER_QTY >= 15;
SELECT PROD_CD, PROD_PRI, PROD_VEND FROM PRODUCTS WHERE PROD_PRI >= 2000 AND PROD_PRI <= 3000;
--SELECT PROD_CD, PROD_PRI, PROD_VEND FROM PRODUCTS WHERE 2000 <= PROD_PRI <= 3000; 이렇게는 안됨


SELECT CUST_NM, CUST_AGE, CUST_LVL, CUST_POINT FROM CUSTOMER WHERE CUST_NM LIKE '김%';
SELECT CUST_CD, CUST_NM, CUST_LVL FROM CUSTOMER WHERE CUST_CD LIKE '_____';
SELECT CUST_NM FROM CUSTOMER WHERE CUST_AGE = 0;

SELECT CUST_NM, CUST_LVL, CUST_AGE FROM CUSTOMER ORDER BY CUST_AGE DESC;
SELECT CUST_CD, PROD_CD, ORDER_QTY, ORDER_REGDT FROM ORDERS WHERE ORDER_QTY >=10 ORDER BY PROD_CD ASC, ORDER_QTY DESC;

SELECT AVG(PROD_PRI) FROM PRODUCTS;
SELECT SUM(PROD_QY) FROM PRODUCTS WHERE PROD_VEND = '한빛제과';
SELECT COUNT(CUST_CD) FROM CUSTOMER;
SELECT COUNT(CUST_AGE) FROM CUSTOMER;
-- COUNT 할때 NULL 값이 들어간 데이터는 포함되지 않는다. 

--SELECT DISTINCT COUNT(PROD_VEND) FROM PRODUCTS;
SELECT COUNT(DISTINCT PROD_VEND) FROM PRODUCTS;
SELECT COUNT(DISTINCT CUST_JOB) FROM CUSTOMER;

-- P.240 / Q. 7-32
-- SELECT ORD_CD, ORDER_QTY FROM ORDERS GROUP BY ORD_CD, ORDER_QTY;
SELECT PROD_CD, ORDER_QTY FROM ORDERS GROUP BY PROD_CD, ORDER_QTY;
SELECT PROD_CD, SUM(ORDER_QTY) AS TOTAL_QTY FROM ORDERS GROUP BY PROD_CD;

-- P.241 / Q. 7-33
SELECT PROD_VEND, COUNT(PROD_CD) AS '제품수' FROM PRODUCTS GROUP BY PROD_VEND;
SELECT PROD_VEND, COUNT(PROD_CD) AS '제품수', MAX(PROD_PRI) AS '최고가' FROM PRODUCTS GROUP BY PROD_VEND;

--SELECT PROD_VEND, COUNT(PROD_CD), MAX(PROD_PRI) FROM PRODUCTS WHERE COUNT(PROD_CD) >=3 GROUP BY PROD_VEND;
SELECT PROD_VEND, COUNT(PROD_CD), MAX(PROD_PRI) FROM PRODUCTS GROUP BY PROD_VEND HAVING COUNT(PROD_CD) >= 3;


SELECT CUST_POINT, COUNT(CUST_CD), AVG(CUST_POINT) FROM CUSTOMER GROUP BY CUST_POINT;
SELECT CUST_LVL, COUNT(CUST_CD), AVG(CUST_POINT) FROM CUSTOMER GROUP BY CUST_LVL HAVING AVG(CUST_POINT) >= 1000;
SELECT CUST_LVL, COUNT(CUST_CD) AS 고객수, AVG(CUST_POINT) AS 적립금평균 FROM CUSTOMER GROUP BY CUST_LVL HAVING AVG(CUST_POINT) >= 1000;

SELECT CUST_CD, PROD_CD, SUM(ORDER_QTY) AS 총주문수량 FROM ORDERS GROUP BY CUST_CD, PROD_CD;

-- P.245 / Q. 7-37
SELECT PRODUCTS.PROD_NM FROM PRODUCTS, ORDERS WHERE ORDERS.CUST_CD = 'BANANA' AND PRODUCTS.PROD_CD = ORDERS.PROD_CD;
SELECT PRODUCTS.PROD_NM FROM PRODUCTS, ORDERS WHERE ORDERS.CUST_CD = 'BANANA' AND PRODUCTS.PROD_CD = ORDERS.PROD_CD GROUP BY PRODUCTS.PROD_NM;
SELECT DISTINCT PRODUCTS.PROD_NM FROM PRODUCTS, ORDERS WHERE ORDERS.CUST_CD = 'BANANA' AND PRODUCTS.PROD_CD = ORDERS.PROD_CD;

--Q. 7-38
SELECT PROD_CD, ORDER_REGDT FROM ORDERS, CUSTOMER WHERE CUST_AGE >= 30 AND ORDERS.CUST_CD = CUSTOMER.CUST_CD;

SELECT PROD_NM FROM ORDERS, CUSTOMER, PRODUCTS WHERE CUST_NM = '고명석' AND ORDERS.CUST_CD = CUSTOMER.CUST_CD AND ORDERS.PROD_CD = PRODUCTS.PROD_CD;

SELECT PROD_NM, PROD_PRI FROM ORDERS, PRODUCTS WHERE PROD_NM = 'BISCUIT';
--SELECT PROD_NM, PROD_PRI FROM ORDERS, PRODUCTS WHERE PROD_VEND = (SELECT PROD_NM FROM PRODUCTS WHERE PROD_NM = 'BISCUIT') AND ORDERS.PROD_CD = PRODUCTS.PROD_CD;
--SELECT PROD_NM, PROD_PRI FROM ORDERS, PRODUCTS WHERE PROD_VEND = (SELECT PROD_VEND FROM PRODUCTS WHERE PROD_NM = 'BISCUIT') AND ORDERS.PROD_CD = PRODUCTS.PROD_CD;
SELECT PROD_NM, PROD_PRI FROM PRODUCTS WHERE PROD_VEND = (SELECT PROD_VEND FROM PRODUCTS WHERE PROD_NM = 'BISCUIT');


SELECT CUST_NM, CUST_POINT FROM CUSTOMER WHERE CUST_POINT = (SELECT MAX(CUST_POINT) FROM CUSTOMER);

-- P.248 / Q. 7-42
--SELECT PROD_NM, PROD_VEND FROM PRODUCTS WHERE PROD_CD = (SELECT PROD_CD FROM CUSTOMER WHERE CUST_NM = 'BANANA');
SELECT PROD_NM, PROD_VEND FROM PRODUCTS WHERE PROD_CD IN (SELECT PROD_CD FROM ORDERS WHERE CUST_CD = 'BANANA');
SELECT PROD_NM, PROD_VEND FROM PRODUCTS WHERE PROD_CD NOT IN (SELECT PROD_CD FROM ORDERS WHERE CUST_CD = 'BANANA');

--SELECT PROD_NM, PROD_PRI, PROD_VEND FROM PRODUCTS WHERE PROD_PRI ALL (PROD_PRI >= (SELECT PROD_PRI FROM PRODUCTS WHERE PROD_VEND = '대한식품'); 
SELECT PROD_NM, PROD_PRI, PROD_VEND FROM PRODUCTS WHERE PROD_PRI > ALL (SELECT PROD_PRI FROM PRODUCTS WHERE PROD_VEND = '대한식품'); 


SELECT * FROM ORDERS;
SELECT CUST_NM FROM CUSTOMER WHERE CUST_CD IN (SELECT CUST_CD FROM ORDERS WHERE ORDER_REGDT LIKE '%2021%');
SELECT CUST_NM FROM CUSTOMER WHERE CUST_CD IN (SELECT CUST_CD FROM ORDERS WHERE ORDER_REGDT LIKE '%04%');
-- Q. 위의 명령문 두개중 위에건 되고 밑에건 안된다.
-- A. 시간의 경우 INT 형이 아니거나 형이 좀 복잡해서 잘 인식하지 못하는 경우도.. 일단 초단위는 안된다고 알아두자.
-- SELECT CUST_NM FROM CUSTOMER WHERE EXISTS (SELECT * FROM ORDERS WHERE ORDER_REGDT LIKE '%11%');
SELECT CUST_NM FROM CUSTOMER WHERE EXISTS (SELECT * FROM ORDERS WHERE ORDER_REGDT LIKE '%11%' AND ORDERS.CUST_CD = CUSTOMER.CUST_CD);
SELECT CUST_NM FROM CUSTOMER WHERE NOT EXISTS (SELECT * FROM ORDERS WHERE ORDER_REGDT LIKE '%11%'AND ORDERS.CUST_CD = CUSTOMER.CUST_CD);


-- 같은 질문, 같은 답이 나와도 명령문이 조금씩 다를 수 있다. (밑의 세 명령문 모두 결과가 같다.)
SELECT PRODUCTS.PROD_NM, PRODUCTS.PROD_VEND FROM PRODUCTS, ORDERS WHERE PRODUCTS.PROD_CD = PRODUCTS.PROD_CD AND ORDERS.CUST_CD = 'BANANA';
SELECT PROD_NM, PROD_VEND FROM PRODUCTS WHERE EXISTS (SELECT * FROM ORDERS WHERE PRODUCTS.PROD_CD = ORDERS.PROD_CD AND ORDERS.CUST_CD = 'BANANA');
SELECT PROD_NM, PROD_VEND FROM PRODUCTS WHERE PROD_CD IN (SELECT PROD_CD FROM ORDERS WHERE CUST_CD = 'BANANA');


-- P.252 / Q. 7-47
INSERT INTO CUSTOMER (CUST_CD, CUST_NM, CUST_AGE, CUST_LVL, CUST_JOB, CUST_POINT)
VALUES ('STRAWBERRY', '최유경', 30, 'VIP', 'PUBLIC OFFICER', 100);
SELECT * FROM CUSTOMER;

INSERT INTO CUSTOMER (CUST_CD, CUST_NM, CUST_AGE, CUST_LVL, CUST_POINT)
VALUES ('TOMATO', '정은심', 36, 'GOLD', 4000);

-- P.254 한빛제품이라는 테이블이 있는 것으로 가정한 상황
--INSERT INTO 한빛제품(PROD_NM, PROD_QY, PROD_PRI) SELECT PROD_NM, PROD_QY, PROD_PRI FROM PRODUCTS WHERE PROD_VEND = '한빛제과';

SELECT * FROM PRODUCTS;
UPDATE PRODUCTS SET PROD_NM = 'BIG PIE' WHERE PROD_CD = 'P03';

-- 고객테이블에서 애플이름 가진 사람 지우기
SELECT * FROM CUSTOMER WHERE CUST_CD = 'APPLE';
DELETE FROM CUSTOMER WHERE CUST_CD = 'APPLE';

-- 가장 마지막에 들어온 주문 취소
-- 애플 다시 살리기 (돌아온 고객 적립금 1000 넣어주기)
-- 모든 고객 적립금 20% 증가
-- 고객정보 바나나가 PO3 5000개 주문하심(P03 재고는 10000)
-- MELON 회원 탈퇴
-- 제품 종류 3개 추가욤
-- 제품 제일 위 3개 (P01, P02, P03) 삭제GO
-- 고객 3명 추가요
INSERT INTO CUSTOMER (CUST);

-- ORDER_REGDT에 DEFAULT 현재시간 말고 다양한 날짜시간 넣어주기
-- 위에 추가한 고객 3명(임의로 A, B, C 라고 할때) A 고객 P04 3개 구매, B 고객 P05 7개 구매, C고객 P06 15개 구매
-- 고객 BANANA 회원탈퇴, MELON 재가입(적립금 1000)
SELECT CUST;

-- 주문내역 데이터 전부 삭제(테이블 삭제 X)
DELETE FROM ORDERS;

-- 제품정보 전부 삭제
DELETE FROM PRODUCTS;

-- 주문 테이블 삭제
DROP TABLE ORDERS;

-- 제품정보 테이블 삭제
DROP TABLE PRODUCTS;

--고객정보 데이터 삭제
DELETE FROM CUSTOMER;

-- 고객정보 테이블 삭제
DROP TABLE CUSTOMER;

-- DB까지 삭제
DROP DATABASE PRACTICE_DB;

